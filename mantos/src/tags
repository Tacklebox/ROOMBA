!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOARD_SUB	Makefile	/^BOARD_SUB = atmega2560$/;"	m
BOARD_TAG	Makefile	/^BOARD_TAG = mega$/;"	m
BUSY_TIME	error.h	4;"	d
CREATE	os.c	/^  CREATE,$/;"	e	enum:kernel_request_type	file:
CSwitch	cswitch.S	/^CSwitch:$/;"	l
Cp	os.c	/^volatile static PD *Cp;$/;"	v	file:
CurrentSp	os.c	/^volatile unsigned char *CurrentSp;$/;"	v
DEAD	os.c	/^typedef enum process_states { DEAD = 0, READY, RUNNING } PROCESS_STATES;$/;"	e	enum:process_states	file:
Disable_Interrupt	os.c	92;"	d	file:
Dispatch	os.c	/^static void Dispatch() {$/;"	f	file:
EIND	cswitch.S	/^EIND    = 0x3C$/;"	d
Enable_Interrupt	os.c	93;"	d	file:
Enter_Kernel	cswitch.S	/^Enter_Kernel:   $/;"	l
Exit_Kernel	cswitch.S	/^Exit_Kernel:$/;"	l
ISR	os.c	/^ISR(BADISR_vect){$/;"	f
ISR	os.c	/^ISR(INT4_vect) {$/;"	f
ISR	os.c	/^ISR(TIMER4_COMPA_vect) {$/;"	f
KERNEL_REQUEST_TYPE	os.c	/^} KERNEL_REQUEST_TYPE;$/;"	t	typeref:enum:kernel_request_type	file:
KernelActive	os.c	/^volatile static unsigned int KernelActive;$/;"	v	file:
KernelSp	os.c	/^volatile unsigned char *KernelSp;$/;"	v
Kernel_Create_Task	os.c	/^static void Kernel_Create_Task(voidfuncptr f) {$/;"	f	file:
Kernel_Create_Task_At	os.c	/^void Kernel_Create_Task_At(PD *p, voidfuncptr f) {$/;"	f
LED_BLINK_DURATION	os.c	11;"	d	file:
MAXPROCESS	os.c	10;"	d	file:
NEXT	os.c	/^  NEXT,$/;"	e	enum:kernel_request_type	file:
NONE	os.c	/^  NONE = 0,$/;"	e	enum:kernel_request_type	file:
NextP	os.c	/^volatile static unsigned int NextP;$/;"	v	file:
Next_Kernel_Request	os.c	/^static void Next_Kernel_Request() {$/;"	f	file:
OBJDIR	Makefile	/^OBJDIR = ..\/bin$/;"	m
OS_Init	os.c	/^void OS_Init() {$/;"	f
OS_Start	os.c	/^void OS_Start() {$/;"	f
PD	os.c	/^} PD;$/;"	t	typeref:struct:ProcessDescriptor	file:
PROCESS_STATES	os.c	/^typedef enum process_states { DEAD = 0, READY, RUNNING } PROCESS_STATES;$/;"	t	typeref:enum:process_states	file:
Ping	os.c	/^void Ping() {$/;"	f
Pong	os.c	/^void Pong() {$/;"	f
Process	os.c	/^static PD Process[MAXPROCESS];$/;"	v	file:
ProcessDescriptor	os.c	/^typedef struct ProcessDescriptor {$/;"	s	file:
READY	os.c	/^typedef enum process_states { DEAD = 0, READY, RUNNING } PROCESS_STATES;$/;"	e	enum:process_states	file:
RUNNING	os.c	/^typedef enum process_states { DEAD = 0, READY, RUNNING } PROCESS_STATES;$/;"	e	enum:process_states	file:
SPH	cswitch.S	/^SPH    = 0x3E$/;"	d
SPL	cswitch.S	/^SPL    = 0x3D$/;"	d
SREG	cswitch.S	/^SREG  = 0x3F$/;"	d
TARGET	Makefile	/^TARGET = mantos$/;"	m
TERMINATE	os.c	/^  TERMINATE$/;"	e	enum:kernel_request_type	file:
Task_Create	os.c	/^void Task_Create(voidfuncptr f) {$/;"	f
Task_Next	os.c	/^void Task_Next() {$/;"	f
Task_Terminate	os.c	/^void Task_Terminate() {$/;"	f
Tasks	os.c	/^volatile static unsigned int Tasks;$/;"	v	file:
USER_LIB_PATH	Makefile	/^USER_LIB_PATH = ..\/lib$/;"	m
WORKSPACE	os.c	9;"	d	file:
code	os.c	/^  voidfuncptr code; \/* function to be executed as a task *\/$/;"	m	struct:ProcessDescriptor	file:
disable_LEDs	LED_Test.c	/^void disable_LEDs(void)$/;"	f
enable_INT4	os.c	/^void enable_INT4() {$/;"	f
enable_LED	LED_Test.c	/^void enable_LED(unsigned int mask)$/;"	f
enable_TIMER4	os.c	/^void enable_TIMER4() {$/;"	f
init_LED_D10	LED_Test.c	/^void init_LED_D10(void)$/;"	f
init_LED_D11	LED_Test.c	/^void init_LED_D11(void)$/;"	f
init_LED_D12	LED_Test.c	/^void init_LED_D12(void)$/;"	f
init_LED_D13	LED_Test.c	/^void init_LED_D13(void)$/;"	f
init_error	error.h	/^void init_error() {$/;"	f
kernel_request_type	os.c	/^typedef enum kernel_request_type {$/;"	g	file:
main	os.c	/^int main() {$/;"	f
process_states	os.c	/^typedef enum process_states { DEAD = 0, READY, RUNNING } PROCESS_STATES;$/;"	g	file:
request	os.c	/^  KERNEL_REQUEST_TYPE request;$/;"	m	struct:ProcessDescriptor	file:
sos	error.h	/^void sos(int code) {$/;"	f
sp	os.c	/^  unsigned char *sp; \/* stack pointer into the "workSpace" *\/$/;"	m	struct:ProcessDescriptor	file:
state	os.c	/^  PROCESS_STATES state;$/;"	m	struct:ProcessDescriptor	file:
voidfuncptr	os.c	/^typedef void (*voidfuncptr)(void); \/* pointer to void f(void) *\/$/;"	t	file:
workSpace	os.c	/^  unsigned char workSpace[WORKSPACE];$/;"	m	struct:ProcessDescriptor	file:
